name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  build-test:
    name: Build, Clippy, Test (matrix)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        toolchain: [1.89.0, stable]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          components: clippy, rustfmt

      - name: Cargo version
        run: cargo --version --verbose

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Clippy (deny warnings)
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

      - name: Build
        run: cargo build --workspace --all-features --all-targets --verbose

      - name: Test (including doctests)
        run: cargo test --workspace --all-features --all-targets --verbose

  # Coverage and Coveralls upload (run once on Linux stable)
  coverage:
    name: Coverage (Coveralls)
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.head_ref == ''
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install llvm-tools and cargo-llvm-cov
        run: |
          rustup component add llvm-tools-preview
          cargo install cargo-llvm-cov || true

      - name: Generate lcov.info
        run: |
          cargo llvm-cov clean --workspace
          cargo llvm-cov --workspace --all-features --lcov --output-path lcov.info

      - name: Upload to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: lcov.info
          parallel: false

  # Optional: Minimal smoke on macOS and Windows (stable only)
  cross-os:
    name: Smoke build (macOS, Windows)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
      - run: cargo build --workspace --all-features --all-targets
